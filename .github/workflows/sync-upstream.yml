name: Sync with Upstream

on:
  schedule:
    # 00:00 UTC every Monday
    - cron: '0 0 * * 1'
  workflow_dispatch:

jobs:
  sync-upstream:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Add upstream remote
        run: |
          git remote add upstream https://github.com/golang/tools.git
          git fetch upstream

      - name: Check for changes
        id: check_changes
        run: |
          git rev-parse HEAD > current_commit.txt
          git rev-parse upstream/master > upstream_commit.txt
          
          # Check if upstream has new changes
          if ! git merge-base --is-ancestor upstream/master HEAD; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Create sync branch
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          # Create a new branch with a timestamp
          SYNC_BRANCH="sync-upstream-$(date +%Y%m%d-%H%M%S)"
          git checkout -b $SYNC_BRANCH upstream/master
          echo "SYNC_BRANCH=$SYNC_BRANCH" >> $GITHUB_ENV

      - name: Replace module name
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          # Find and replace all occurrences of golang.org/x/tools with github.com/block/ftl-golang-tools
          find . -type f -name "*.go" -o -name "*.mod" -o -name "*.sum" -o -name "*.md" | xargs sed -i 's|golang\.org/x/tools|github.com/block/ftl-golang-tools|g'
          
          # Special handling for go.mod
          sed -i 's|^module golang\.org/x/tools$|module github.com/block/ftl-golang-tools|g' go.mod
          
          # Verify the changes were made correctly
          if ! grep -q "module github.com/block/ftl-golang-tools" go.mod; then
            echo "Error: Module name replacement failed in go.mod"
            exit 1
          fi

      - name: Commit changes
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git add .
          git commit -m "Sync with upstream and update module paths"

      - name: Push branch
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git push origin $SYNC_BRANCH

      - name: Create Pull Request
        if: steps.check_changes.outputs.has_changes == 'true'
        id: create-pr
        run: |
          # Create PR using GitHub CLI
          PR_URL=$(gh pr create --title "Sync with upstream golang/tools" \
            --body "This PR syncs changes from the upstream repository (golang/tools) and updates all module paths.
            
            - Synced with latest upstream changes
            - Replaced all occurrences of \`golang.org/x/tools\` with \`github.com/block/ftl-golang-tools\`
            
            This PR was created automatically by the sync-upstream workflow." \
            --base master \
            --head $SYNC_BRANCH \
            --repo $GITHUB_REPOSITORY)
          
          echo "PR created: $PR_URL"
          PR_NUMBER=$(echo $PR_URL | grep -o '[0-9]*$')
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT

      - name: Setup GitHub CLI
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          # Ensure GitHub CLI is installed
          gh --version || (echo "Installing GitHub CLI" && curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null && sudo apt update && sudo apt install gh -y)
          # Authenticate GitHub CLI
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Enable auto-merge
        if: steps.check_changes.outputs.has_changes == 'true' && steps.create-pr.outputs.pr_number
        run: |
          gh pr merge ${{ steps.create-pr.outputs.pr_number }} --auto --merge --repo $GITHUB_REPOSITORY
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output sync status
        run: |
          if [ "${{ steps.check_changes.outputs.has_changes }}" == "true" ]; then
            echo "Created PR to sync with upstream changes"
            if [ -n "${{ steps.create-pr.outputs.pr_number }}" ]; then
              echo "PR #${{ steps.create-pr.outputs.pr_number }} created and auto-merge enabled"
              echo "PR URL: ${{ steps.create-pr.outputs.pr_url }}"
              echo "This PR was created in repository: $GITHUB_REPOSITORY"
            fi
          else
            echo "Repository is already in sync with upstream. No changes needed."
          fi 
